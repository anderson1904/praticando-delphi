unit Classes.Contas;

interface

uses
  Classes.Clientes, Classes.Emprestimos, Classes.transacoes,
  system.Generics.Collections, DateUtils, System.SysUtils;

type
  TConta = class
  private
    FNumero: string;
    FSaldo: Currency;
    FCliente: TCliente;
    FAtivado: boolean;
    FTransacoes: Tobjectlist<TTransacao>;
    FEmprestimos: Tobjectlist<TEmprestimo>;

    procedure setCliente(const aValue: TCliente);
    procedure SetAtivado(aBool: boolean);
    procedure SetNumero(aNumero: string);

    procedure adicionarTransacao(aTipo: TTransacaoTipos; aValor: Currency; aDescrisao: string);
  protected
    { protected declarations }
  public
    constructor create;
    destructor destroy;
    procedure Depositar(aValor: Currency);
    procedure Sacar(aValor: Currency);
    procedure Transferir(aValor: Currency; aDestino: TConta);
    procedure SolicitarEmprestimo(aValor: Currency; aTaxaJuros: Currency;
      aDataInicio: TDateTime; aMeses: integer);
    function GerarExtrato: string;

    property Emprestimos: Tobjectlist<TEmprestimo> read FEmprestimos;
    property Numero:  string read FNumero write SetNumero;
    property CLiente: TCliente read FCliente write setCliente;
    property Ativado: boolean read FAtivado write SetAtivado;
    property Saldo: currency read FSaldo;
  published
    { published declarations }
  end;

implementation

{ TConta }
//construtor
constructor TConta.create;
begin
  FSaldo := 0;
  FAtivado := True;

  FTransacoes:= TObjectlist<TTransacao>.create;
  FEmprestimos:= TObjectlist<TEmprestimo>.create;
end;

//destruidor
destructor TConta.destroy;
begin
  FTransacoes.free;
  FEmprestimos.free;
  inherited;
end;

//setters
procedure TConta.setCliente(const aValue: TCliente);
begin
  FCliente := aValue;
end;

procedure TConta.SetNumero(aNumero: string);
begin
  FNumero := aNumero;
end;

procedure TConta.SetAtivado(aBool: boolean);
begin
  FAtivado := aBool;
end;

//transações
procedure TConta.adicionarTransacao(aTipo: TTransacaoTipos; aValor: Currency;
   aDescrisao: string);
var
  LTransacao: TTransacao;
begin
  LTransacao := TTransacao.create;
  LTransacao.Tipo := aTipo;
  LTransacao.Valor := aValor;
  LTransacao.Descrisao := aDescrisao;

  FTransacoes.add(LTransacao);
end;

//depositos
procedure TConta.Depositar(aValor: Currency);
var
  LDescrisao: string;
begin
  LDescrisao:='R$'+''+' depositados com sucesso';
  FSaldo := FSaldo + aValor;
  adicionarTransacao(tpDeposito,aValor, LDescrisao);
end;

//Saques
procedure TConta.Sacar(aValor: Currency);
var
  LDescrisao: string;
begin
  if aValor >FSaldo then
    raise Exception.Create('Saldo insuficiente');

  LDescrisao:='R$'+'valor total'+' sacados com sucesso';
  FSaldo := FSaldo - aValor;
  adicionarTransacao(tpSaque, aValor, LDescrisao);
end;

//solicitar emprestimo
procedure TConta.SolicitarEmprestimo(aValor: Currency; aTaxaJuros: Currency;
  aDataInicio: TDateTime; aMeses: integer);
var
  Lemprestimo: TEmprestimo;
begin
  Lemprestimo := TEmprestimo.create;
  Lemprestimo.Valor := aValor;
  Lemprestimo.TaxaJuros := aTaxaJuros;
  Lemprestimo.DataInicio := aDataInicio;
  Lemprestimo.DataFim := IncMonth(aDataInicio, AMeses);
  Emprestimos.add(Lemprestimo);
end;

//transferencia
procedure TConta.Transferir(aValor: Currency; aDestino: TConta);
var
  LDescrisao: string;
begin
  LDescrisao:= 'R$'+ 'valor'+ ' transferidos para a conta: '+ aDestino.FNumero;
  self.sacar(aValor);
  aDestino.Depositar(aValor);
  adicionarTransacao(tpTransferencia, aValor, LDescrisao);
end;

//extrato
function TConta.GerarExtrato: string;
begin
  // percorrer pela lista de transações

  // colocar cada transação dentro de um frame
  // e colocar os frames dentro de um componente de lista
end;
end.
